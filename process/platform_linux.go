package process

import (
	"bufio"
	"bytes"
	"fmt"
	"os/exec"
	"strings"
	"text/template"
)

type linux platform

var (
	defaultConfDir = "/etc/init"
)

func newPlatform() *linux {
	return &linux{
		InitCmd: "initctl",
		Config: config{
			Directory: getConfDir(),
			Extension: ".conf",
		},
	}
}

func (env *linux) Install(serviceName string, serviceVersion, noFileSoftLimit, noFileHardLimit uint64) error {
	templateText := `
# Auto-generated by the provisioning service at {{.GeneratedAt}}

description "{{.Description}}"
author      "{{.Author}}"

start on filesystem or runlevel [2345]
stop on runlevel [!2345]

setuid {{.RunAsUser}}
setgid {{.RunAsGroup}}

script
  [ -f /opt/hailo/env.sh ] && . /opt/hailo/env.sh
  exec {{.ProcessName}} 1>>/opt/hailo/var/log/{{.Description}}-console.log 2>>/opt/hailo/var/log/{{.Description}}-error.log
end script

limit nofile {{.NoFileSoftLimit}} {{.NoFileHardLimit}}

respawn
respawn limit 10 5`

	tmpl, err := template.New("upstart").Parse(templateText)
	if err != nil {
		return err
	}

	return install(serviceName, serviceVersion, noFileSoftLimit, noFileHardLimit, env.Config, tmpl)
}

func (env *linux) List(matching string) ([]string, error) {
	cmd := exec.Command(env.InitCmd, "list")
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		return []string{}, err
	}

	scanner := bufio.NewScanner(bytes.NewReader(out.Bytes()))
	processes := make([]string, 0)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.Split(line, " ")
		if parts[1] == "start/running," && (len(matching) == 0 || strings.Contains(parts[0], matching)) {
			processes = append(processes, parts[0])
		}
	}

	return processes, nil
}

func (env *linux) Start(serviceName string, serviceVersion, noFileSoftLimit, noFileHardLimit uint64) error {
	if err := env.Install(serviceName, serviceVersion, noFileSoftLimit, noFileHardLimit); err != nil {
		return err
	}

	cmdName := combineNameVersion(serviceName, serviceVersion)
	if err := run(env.InitCmd, "start", cmdName); err != nil {
		return fmt.Errorf("Tried to start %s: %v", cmdName, err)
	}

	return nil
}

func (env *linux) Stop(serviceName string, serviceVersion uint64) error {
	cmdName := combineNameVersion(serviceName, serviceVersion)
	if err := run(env.InitCmd, "stop", cmdName); err != nil {
		return fmt.Errorf("Tried to stop %s: %v", cmdName, err)
	}

	if err := env.Uninstall(serviceName, serviceVersion); err != nil {
		return err
	}

	return nil
}

func (env *linux) Restart(serviceName string, serviceVersion uint64) error {
	cmdName := combineNameVersion(serviceName, serviceVersion)
	if err := run(env.InitCmd, "restart", cmdName); err != nil {
		return fmt.Errorf("Tried to restart %s: %v", cmdName, err)
	}

	return nil
}

func (env *linux) Uninstall(serviceName string, serviceVersion uint64) error {
	return uninstall(serviceName, serviceVersion, env.Config)
}
